package forms.grupos;

import java.awt.Component;
import java.util.ArrayList;
import java.util.EventObject;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import swim.tabla.AccionModelo;
import modelos.GrupoModelo;
import modelos.GrupoMateriaModelo;
import modelos.MaestroModelo;
import modelos.MateriaModelo;
import operaciones.OpGrupoMateria;
import operaciones.OpMaestro;
import operaciones.OpMaterias;
import swim.tabla.EventoEditar;

public class MateriasGruposForm extends javax.swing.JPanel {

    private final OpMaterias opMaterias;
    private GrupoModelo grupoModelo;
    private OpMaestro opMaestro;
    private OpGrupoMateria opGrupoMateria;
    private boolean modoVer;
    private EventoEditar eventoEditar;

    public MateriasGruposForm(GrupoModelo grupoModelo) {
        initComponents();
        tablaMaterias1.setColumnEditor(4);
        this.grupoModelo = grupoModelo;
        opMaterias = new OpMaterias();
        opMaestro = new OpMaestro();
        opGrupoMateria = new OpGrupoMateria();
        init();
    }

    public void init() {
        eventoEditar = new EventoEditar() {
            @Override
            public void editar(Object model) {
                GrupoMateriaModelo grupoMateria = (GrupoMateriaModelo) model;
                JComboBox comboProfesores = new JComboBox();
                comboProfesores.addItem("----");
                opMaestro.getDocentes().forEach((profesores) -> {
                    comboProfesores.addItem(profesores);
                });

                comboProfesores.setSelectedItem(grupoMateria.getMaestro());

                Object[] message = {
                    "Selecciona el Profesor a Impartir Clases", comboProfesores,};

                int option = JOptionPane.showConfirmDialog(null, message, "Ingresa los datos", JOptionPane.OK_CANCEL_OPTION);

                if (option == JOptionPane.OK_OPTION) {
                    if (comboProfesores.getSelectedIndex() > 0) {
                        MaestroModelo maestro = (MaestroModelo) comboProfesores.getSelectedItem();
                        boolean seActualizoDocente = opGrupoMateria.actualizarIdDocente(grupoMateria, maestro.getId());

                        if (seActualizoDocente) {
                            JOptionPane.showMessageDialog(null, "Se actualizo el docente");
                            actualizarTabla();
                        } else {
                            JOptionPane.showMessageDialog(null, "Hubo un error al actualizar");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Debe seleccionar un Profesor a impartir clases");
                    }
                }
            }

        };
        actualizarTabla();

    }

    public void actualizarTabla() {
        
        tablaMaterias1.clear();

        ArrayList<GrupoMateriaModelo> lista = opGrupoMateria.obtenerGruposMateriasPorIdGrupo(grupoModelo.getId());

        for (int i = 0; i < lista.size(); i++) {
            GrupoMateriaModelo grupoMateria = lista.get(i);

            AccionModelo accionModelo = new AccionModelo(grupoMateria, eventoEditar);

            if (grupoMateria.getCursada() == 1) {
                tablaMaterias1.getTriggerRows().add(i);
                tablaMaterias1.addRow(new Object[]{
                    grupoMateria.getMateria().getClave(), grupoMateria.getMateria().getNombre(), grupoMateria.getMateria().getSemestre(), grupoMateria.getMaestro()
                });
            } else {
                tablaMaterias1.addRow(new Object[]{
                    grupoMateria.getMateria().getClave(), grupoMateria.getMateria().getNombre(), grupoMateria.getMateria().getSemestre(), grupoMateria.getMaestro(), accionModelo
                });
            }

        }
    }

    public void modoVer() {
        modoVer = true;
        this.remove(btnAgregarMateria);
        this.revalidate();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAgregarMateria = new swim.botones.ButtonRounded();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMaterias1 = new swim.tabla.TablaMaterias();

        setBackground(new java.awt.Color(255, 255, 255));

        btnAgregarMateria.setBackground(new java.awt.Color(0, 102, 102));
        btnAgregarMateria.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarMateria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/materia.png"))); // NOI18N
        btnAgregarMateria.setText("Agregar Materia");
        btnAgregarMateria.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnAgregarMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarMateriaActionPerformed(evt);
            }
        });

        tablaMaterias1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Nombre", "Semestre", "Profesor", "Acciones"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaMaterias1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 1329, Short.MAX_VALUE)
                        .addComponent(btnAgregarMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 20, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(btnAgregarMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarMateriaActionPerformed
        JComboBox comboMaterias = new JComboBox();
        comboMaterias.addItem("----");
        opMaterias.getMateriasByCarreraSemestreSinElegir(grupoModelo.getCarrera().getIdCarrera(), grupoModelo.getSemestre()).forEach((materia) -> {
            comboMaterias.addItem(materia);
        });

        JComboBox comboProfesores = new JComboBox();
        comboProfesores.addItem("----");
        opMaestro.getDocentes().forEach((profesores) -> {
            comboProfesores.addItem(profesores);
        });

        Object[] message = {
            "Selecciona la Materia : ", comboMaterias,
            "Selecciona el Profesor: ", comboProfesores,};

        int option = JOptionPane.showConfirmDialog(null, message, "Ingresa los datos", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            if (comboMaterias.getSelectedIndex() > 0 && comboProfesores.getSelectedIndex() > 0) {
                MateriaModelo materia = (MateriaModelo) comboMaterias.getSelectedItem();
                GrupoMateriaModelo grupoMateria = new GrupoMateriaModelo();
                grupoMateria.setMaestro((MaestroModelo) comboProfesores.getSelectedItem());
                grupoMateria.setMateria(materia);
                grupoMateria.setIdGrupo(grupoModelo.getId());
                grupoMateria.setCursada(00);
                boolean seAgregoMateria = opGrupoMateria.agregarGrupoMateria(grupoMateria);
                if (seAgregoMateria) {
                    JOptionPane.showMessageDialog(null, "Se agrego la materia");
                    actualizarTabla();
                } else {
                    JOptionPane.showMessageDialog(null, "Hubo un error al agregar la materia");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un Profesor a impartir clases");
            }
        }
    }//GEN-LAST:event_btnAgregarMateriaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private swim.botones.ButtonRounded btnAgregarMateria;
    private javax.swing.JScrollPane jScrollPane1;
    private swim.tabla.TablaMaterias tablaMaterias1;
    // End of variables declaration//GEN-END:variables
}
